using System;
using System.Collections.Generic;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Interactions;

namespace SeleniumAutoDuc
{
    class Program
    {
        private static Cacher cacher;
        private static Poster poster;
        private static Thread cacher_thread;
        private static Thread poster_thread;

        static void Main(string[] args)
        {
            InfoHolder.LoginPrompt();
            // Init
            cacher = new Cacher();
            poster = new Poster();

            try
            {
                Console.Clear();
                Init();
            }
            catch (WebDriverException)
            {
                // End all working threads and start again
                Console.Clear();
                Dispose();
                Init();
            }
        }

        public static void Init()
        {
            // Input
            InfoHolder.IsWorking = true;
            Console.WriteLine("Please wait for browser to launch...");
      
            // Start 2 threads
            cacher_thread = new Thread(() => cacher.Start());
            poster_thread = new Thread(() => poster.Start());

            cacher_thread.Start();
            poster_thread.Start();
        }

        public static void Dispose()
        {
            InfoHolder.IsWorking = false;
            Console.WriteLine("Browser request timed out. Restarting...");
            cacher.Stop();
            poster.Stop();
        }

        public abstract class VozSurfer
        {
            protected string driver_name;
            protected FirefoxDriver driver;

            public virtual void Login(string userName, string password)
            {
                driver.Navigate().GoToUrl("http://vozforums.com/forumdisplay.php?f=17");

                // UName & Password
                // Empty UName placeholder
                IWebElement usernameForm_Elmt = driver.FindElement(By.XPath("//*[@id='navbar_username']"));
                usernameForm_Elmt.Clear();
                usernameForm_Elmt.SendKeys(userName);
                IWebElement passwordForm_Elmt = driver.FindElement(By.XPath("//*[@id='navbar_password']"));
                passwordForm_Elmt.SendKeys(password);

                // Click submit
                IWebElement submitButton_Elmt = driver.FindElement(By.XPath("/html/body/div[2]/div[1]/div/table/tbody/tr/td[2]/form/table/tbody/tr[2]/td[3]/input"));
                submitButton_Elmt.Submit();

                // Wait 10s for login redirection ( depends on connection )
                Thread.Sleep(10000);

                // Still not redirected: either you're banned or your internet connection fails
                if (driver.Url != "https://vozforums.com/forumdisplay.php?f=17")
                {
                    Console.Write("{0}: ", DateTime.Now);

                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("{0}: Login failed, wrong Username & Password or you're banned.", driver_name);
                    Console.ResetColor();
                }
                else
                {
                    Console.Write("{0}: ", DateTime.Now);

                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.WriteLine("{0}: Login successful!", driver_name);
                    Console.ResetColor();
                }

            }
            public virtual void Stop()
            {
                driver.Quit();
            }
        }

        public class Cacher : VozSurfer
        {
            public Cacher()
            {
                driver_name = "Cacher";

                FirefoxProfile profile = new FirefoxProfile();
                profile.SetPreference("permissions.default.image", 2);
                profile.AddExtension("noscript.xpi");

                driver = new FirefoxDriver(profile);
            }

            public void Start()
            {
                // Close the fucking noscript ad
                // wait for it fully loads before closing this goddamn ad
                while (driver.WindowHandles.Count != 2) ;
                driver.SwitchTo().Window(driver.WindowHandles[1]);
                driver.Close();
                driver.SwitchTo().Window(driver.WindowHandles[0]);

                Login(InfoHolder.userName, InfoHolder.password);
                CacheNewThread(ref InfoHolder.threadInfos);
            }

            public void CacheNewThread(ref Queue<threadInfo> threadInfos)
            {
                while (InfoHolder.IsWorking)
                {
                    lock (InfoHolder.locker)
                    {
                        // Refresh f17
                        driver.Navigate().GoToUrl("https://vozforums.com/forumdisplay.php?f=17");
                        Console.WriteLine("{0}: Refresh F17 for new threads.", DateTime.Now);

                        // Search for new threads
                        int i = InfoHolder.startingThread;
                        while (i <= InfoHolder.endingThread)
                        {
                            // Find <tr> tags inside <tbody> of f17 ( see f17 HTML source )
                            // From 1 to 8 are forbidden threads and F17 always contains 28 thread
                            string trPattern_XPath = "//*[@id='threadbits_forum_17']/tr"; // + [x]
                            string tr_XPath = trPattern_XPath + "[" + i + "]";

                            // Number of replies is in the right of title
                            // Status icon is in the left of title
                            string repliesNum = driver.FindElement(By.XPath(tr_XPath + "/td[4]/a")).Text;
                            string statusicon = driver.FindElement(By.XPath(tr_XPath + "/td[1]/img")).GetAttribute("src");

                            // Find threadID
                            string threadIDTag_XPath = tr_XPath + "/td[1]";
                            string threadID = ExtractThreadID(threadIDTag_XPath);

                            if (IsLowPostCount(repliesNum) && IsAlreadyQuoted(statusicon) && !IsInQueue(threadID))
                            {
                                // Go to thread
                                string showThread_url = "https://vozforums.com/showthread.php?t=" + threadID;
                                driver.Navigate().GoToUrl(showThread_url);

                                // Get first post ID from thread
                                string firstPostID_XPath = "//*[@id='posts']/div[1]/div/div" + "/div";
                                string firstPostID = ExtractFirstPostID(firstPostID_XPath);

                                // Go to quoting reply page
                                string doNewReply = "https://vozforums.com/newreply.php?do=newreply&p=" + firstPostID;
                                driver.Navigate().GoToUrl(doNewReply);
                                string firstPostContent_XPath = "//*[@id='vB_Editor_001_textarea']";
                                string firstPostContent = ExtractFirstPostContent(firstPostContent_XPath);

                                // Enqueue ID and content for later reply
                                threadInfo threadInfo = new threadInfo();
                                threadInfo.threadID = threadID;
                                threadInfo.firstPostID = firstPostID;
                                threadInfo.firstPostContent = RemoveLink_n_Img(firstPostContent);

                                threadInfos.Enqueue(threadInfo);
                                // Back twice to f17
                                driver.Navigate().Back();
                                driver.Navigate().Back();
                            }
                            i++;
                        }  
                    }
                    Thread.Sleep(5000);
                }
            }

            public bool IsLowPostCount(string repliesNum_String)
            {
                // Sometimes this number is X,XXX so "," must be removed before parsing to Int
                repliesNum_String = repliesNum_String.Replace(",", "");
                int repliesNum_Int = Int32.Parse(repliesNum_String);
                if (repliesNum_Int < 5)
                    return true;
                else
                    return false;
            }
            public bool IsAlreadyQuoted(string statusicon)
            {
                // Status icons indicate whether the bot posted in this thread or not
                if (statusicon != "https://vozforums.com/images/statusicon/thread_dot.gif"
                    && statusicon != "https://vozforums.com/images/statusicon/thread_dot_new.gif")
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            public bool IsInQueue(string threadID)
            {
                foreach (threadInfo threadInfo in InfoHolder.threadInfos)
                {
                    if (threadInfo.threadID == threadID)
                        return true;
                }
                return false;
            }

            // Extract specific thing from specific XPath
            // hard-coded to vozforum
            public string RemoveLink_n_Img(string firstPostContent)
            {
                // Remove [URL, [url, [/url], [/URL]
                firstPostContent = firstPostContent.Replace("[URL","");
                firstPostContent = firstPostContent.Replace("[url","");
                firstPostContent = firstPostContent.Replace("[/URL]","");
                firstPostContent = firstPostContent.Replace("[/url]","");

                // Remove [IMG], [img], [/IMG], [/img]
                firstPostContent = firstPostContent.Replace("[IMG]", "");
                firstPostContent = firstPostContent.Replace("[img]", "");
                firstPostContent = firstPostContent.Replace("[/IMG]", "");
                firstPostContent = firstPostContent.Replace("[/img]", "");

                // Remove https://, https://
                firstPostContent = firstPostContent.Replace("https://", "");
                firstPostContent = firstPostContent.Replace("https://", "");

                return firstPostContent;
            }
            public string ExtractThreadID(string threadIDTag_XPath)
            {
                IWebElement threadIDTag = driver.FindElement(By.XPath(threadIDTag_XPath));
                string threadID = threadIDTag.GetAttribute("id").Substring(20);
                return threadID;
            }
            public string ExtractFirstPostID(string firstPostIDTag_XPath)
            {
                IWebElement firstPostIDTag = driver.FindElement(By.XPath(firstPostIDTag_XPath));
                string firstPostID = firstPostIDTag.GetAttribute("id").Substring(4);
                return firstPostID;
            }
            public string ExtractFirstPostContent(string firstPostContentTag_XPath)
            {
                IWebElement firstPostContentTag = driver.FindElement(By.XPath(firstPostContentTag_XPath));
                string firstPostContent = firstPostContentTag.Text;
                return firstPostContent;
            }
        }

        public class Poster : VozSurfer
        {
            private bool justQuoted = false;

            public Poster()
            {
                // FF test
                driver_name = "Poster";

                FirefoxProfile profile = new FirefoxProfile();
                profile.SetPreference("permissions.default.image", 2);
                profile.AddExtension("noscript.xpi");

                driver = new FirefoxDriver(profile);
            }

            public void Start()
            {
                // Close the fucking noscript ad
                // wait for it fully loads before closing this goddamn ad
                while (driver.WindowHandles.Count != 2) ;
                driver.SwitchTo().Window(driver.WindowHandles[1]);
                driver.Close();
                driver.SwitchTo().Window(driver.WindowHandles[0]);

                Login(InfoHolder.userName, InfoHolder.password);
                PostQueuedMessages(ref InfoHolder.threadInfos);
            }

            public void PostQueuedMessages(ref Queue<threadInfo> threadInfos)
            {
                while (InfoHolder.IsWorking)
                {
                    lock (InfoHolder.locker)
                    {
                        if (InfoHolder.threadInfos.Count != 0)
                        {
                            // Go to posting page of a thread in the queue
                            threadInfo threadInfo = threadInfos.Dequeue();
                            driver.Navigate().GoToUrl("https://vozforums.com/newreply.php?do=newreply&p=" + threadInfo.firstPostID);

                            // Erase first post quote ( possibly edited by user )
                            // Add the cached first post quote
                            IWebElement messageForm_Elmt = driver.FindElement(By.XPath("//*[@id='vB_Editor_001_textarea']"));
                            messageForm_Elmt.Clear();
                            messageForm_Elmt.SendKeys(threadInfo.firstPostContent);
                            messageForm_Elmt.SendKeys(randomMessage());
                            IWebElement submitButton_Elmt = driver.FindElement(By.XPath("//*[@id='vB_Editor_001_save']"));
                            submitButton_Elmt.Submit();

                            // Wait for posting finish
                            // or release the lock and cacher may caches this thread again
                            Thread.Sleep(5000);

                            //Report
                            Console.Write("{0}: ", DateTime.Now);

                            Console.ForegroundColor = ConsoleColor.Green;
                            Console.WriteLine("Successfully quoted thread: {0}. Waiting 30s...", threadInfo.threadID);
                            Console.ResetColor();

                            // Just quoted, sleept
                            justQuoted = true;
                        }
                    }
                    if (justQuoted)
                    {
                        justQuoted = false;
                        Thread.Sleep(30000);
                    }
                    else
                    {
                        Thread.Sleep(5000);
                    }
                }
            }

            public string randomMessage()
            {
                string[] messageList = new String[10];
                messageList[0] = "Prepare... for your Đức.";
                messageList[1] = "Your final Đức begins.";
                messageList[2] = "You will learn what Đức truly is.";
                messageList[3] = "This...Đức passion...compels me.";
                messageList[4] = "I never Đức anyone. It is the program that Đức.";
                messageList[5] = "Đức requires a certain loss of bandwidth.";
                messageList[6] = "They call me mad. All Đức-ers are mad.";
                messageList[7] = "I'm misunderstood. Đức can't be evil.";
                messageList[8] = "Until they ban me, I'll keep Đức-ing.";
                messageList[9] = "Only my Đức can make you memorable.";
                Random rndm = new Random();
                return messageList[rndm.Next(10)];
            }
        }

        public static class InfoHolder
        {
            public static string userName;
            public static string password;
            public static Queue<threadInfo> threadInfos = new Queue<threadInfo>();
            public static Object locker = new Object();
            public static bool IsWorking = true;
            public static int startingThread = 9;
            public static int endingThread = 28;

            public static void LoginPrompt()
            {
                Console.Write("Username: ");
                userName = Console.ReadLine();

                Console.Write("Password: ");
                password = Console.ReadLine();
            }            
        }

        public struct threadInfo
        {
            public string threadID;
            public string firstPostID;
            public string firstPostContent;
        }

    }
}
