using System;
using System.Collections.Generic;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.PhantomJS;
using OpenQA.Selenium.Firefox;

namespace SeleniumAutoDuc
{
    class Program
    {
        static void Main(string[] args)
        {
            AutoDucBot adb = new AutoDucBot();
            adb.InitWorkingThreads();      
            // Won't go to this 
            Console.ReadLine();
        }

        public struct threadInfo
        {
            public string threadID;
            public string firstPostID;
            public string firstPostContent;
        }

        class AutoDucBot
        {
            private IWebDriver poster_driver;
            private IWebDriver cacher_driver;
            private string userName;
            private string password;
            private AutoResetEvent cacherRecentlyCaches;
            private AutoResetEvent posterPostingFinishes;
            private Queue<threadInfo> threadInfos;
            private Queue<threadInfo> quotedThreadInfos;

            public AutoDucBot()
            {
                //Init Driver and No command line interface 
                //The console is now printing language-binding messages.
                // firefox testing

                System.Environment.SetEnvironmentVariable("webdriver.gecko.driver", "C:\\Users\\Win8\\Desktop\\EclipseWorkspace\\geckodriver.exe");
                //PhantomJSDriverService noCLI = PhantomJSDriverService.CreateDefaultService("C:\\Users\\Win8\\Desktop\\phantomjs-2.1.1-windows\\phantomjs-2.1.1-windows\\bin");
                //noCLI.HideCommandPromptWindow = true;
                cacher_driver = new FirefoxDriver();
                poster_driver = new FirefoxDriver();

                //Init basic info
                userName = "yourusername";
                password = "yourpassword";
                threadInfos = new Queue<threadInfo>();
                quotedThreadInfos = new Queue<threadInfo>();
                cacherRecentlyCaches = new AutoResetEvent(false);
                posterPostingFinishes = new AutoResetEvent(false);
            }

            public void Login(IWebDriver driver, string driverName)
            {
                // Vbulletin allows login from multiple sources
                
                driver.Navigate().GoToUrl("https://vozforums.com/forumdisplay.php?f=17");

                // UName & Password
                // Empty UName placeholder
                IWebElement usernameForm_Elmt = driver.FindElement(By.XPath("//*[@id='navbar_username']"));
                usernameForm_Elmt.Clear();
                usernameForm_Elmt.SendKeys(userName);
                IWebElement passwordForm_Elmt = driver.FindElement(By.XPath("//*[@id='navbar_password']"));
                passwordForm_Elmt.SendKeys(password);

                // Click submit
                IWebElement submitButton_Elmt = driver.FindElement(By.XPath("/html/body/div[2]/div[1]/div/table/tbody/tr/td[2]/form/table/tbody/tr[2]/td[3]/input"));
                submitButton_Elmt.Submit();

                // Wait 10s for login redirection ( depends on connection )
                Thread.Sleep(10000);

                // Assuming you're not banned 
                Console.WriteLine("{0}: {1}. Login successful!", DateTime.Now, driverName);
            }
            public void InitWorkingThreads()
            {
                Thread cacher_thread = new Thread(new ThreadStart(CacheNewThread));
                Thread poster_thread = new Thread(new ThreadStart(PostQueuedMessages));

                cacher_thread.Start();
                poster_thread.Start();
            }

            public void CacheNewThread()
            {
                Login(cacher_driver, "Cacher");
                while (true)
                {
                    // Refresh f17
                    Console.WriteLine("{0}: Refresh f17 for new threads.", DateTime.Now);
                    cacher_driver.Navigate().GoToUrl("https://vozforums.com/forumdisplay.php?f=17");

                    // Search for new threads
                    for (int i = 9; i <= 28; i++)
                    {
                        try
                        {
                            // Find <tr> tags inside <tbody> of f17 ( see f17 HTML source )
                            // From 1 to 8 are forbidden threads and F17 always contains 28 thread
                            string trPattern_XPath = "//*[@id='threadbits_forum_17']/tr"; // + [x]
                            string tr_XPath = trPattern_XPath + "[" + i + "]";

                            // Number of replies is in the right of title
                            // Status icon is in the left of title
                            string repliesNum = cacher_driver.FindElement(By.XPath(tr_XPath + "/td[4]/a")).Text;
                            string statusicon = cacher_driver.FindElement(By.XPath(tr_XPath + "/td[1]/img")).GetAttribute("src");

                            if (IsLowPostCount(repliesNum) && IsAlreadyQuoted(statusicon))
                            {
                                // Go to thread
                                string threadID = ExtractThreadID(tr_XPath + "/td[1]");
                                string showThread_url = "https://vozforums.com/showthread.php?t=" + threadID;
                                cacher_driver.Navigate().GoToUrl(showThread_url);

                                // Get ID from thread
                                string firstPostID_XPath = "//*[@id='posts']/div[1]/div/div" + "/div";
                                string firstPostID = ExtractFirstPostID(firstPostID_XPath);

                                // Go to quoting reply page
                                string doNewReply = "https://vozforums.com/newreply.php?do=newreply&p=" + firstPostID;
                                cacher_driver.Navigate().GoToUrl(doNewReply);
                                string firstPostContent_XPath = "//*[@id='vB_Editor_001_textarea']";
                                string firstPostContent = ExtractFirstPostContent(firstPostContent_XPath);

                                // Enqueue ID and content for later reply
                                threadInfo threadInfo = new threadInfo();
                                threadInfo.threadID = threadID;
                                threadInfo.firstPostID = firstPostID;
                                threadInfo.firstPostContent = firstPostContent;

                                // Only enqueue if not in queue
                                if (!threadInfos.Contains(threadInfo) && !quotedThreadInfos.Contains(threadInfo))
                                {
                                    threadInfos.Enqueue(threadInfo);
                                }

                                // We found a new thread and the bot already went there
                                // break this <for loop> to refresh f17 and calculate from 9 - 28 again
                                break;
                            }
                        }
                        catch (OpenQA.Selenium.NoSuchElementException)
                        {
                            // Happens when the bot goes to a thread that was just deleted
                            // so it only sees "Invalid thread specified"
                            Console.Write("{0}: ", DateTime.Now);

                            Console.ForegroundColor = ConsoleColor.Red;
                            Console.WriteLine("Cacher: Unable to load thread, possibly deleted.");
                            Console.ResetColor();
                        }
                        finally
                        {
                            // Already scanned through 20 threads of f17
                            // 5s before refreshing again
                            if (i == 28)
                            {
                                Thread.Sleep(5000);
                            }
                        }
                    }
                    cacherRecentlyCaches.Set();
                }
            }
            public void PostQueuedMessages()
            {
                Login(poster_driver, "Poster");
                while (true)
                {
                    while (threadInfos.Count != 0)
                    {
                        try
                        {
                            // Go to posting page of a thread in the queue
                            threadInfo threadInfo = threadInfos.Dequeue();
                            quotedThreadInfos.Enqueue(threadInfo);

                            poster_driver.Navigate().GoToUrl("https://vozforums.com/newreply.php?do=newreply&p=" + threadInfo.firstPostID);

                            // Erase first post quote ( possibly edited by user )
                            // Add the cached first post quote
                            IWebElement messageForm_Elmt = poster_driver.FindElement(By.XPath("//*[@id='vB_Editor_001_textarea']"));
                            messageForm_Elmt.Clear();
                            messageForm_Elmt.SendKeys(threadInfo.firstPostContent);
                            messageForm_Elmt.SendKeys(randomMessage());
                            IWebElement submitButton_Elmt = poster_driver.FindElement(By.XPath("//*[@id='vB_Editor_001_save']"));
                            submitButton_Elmt.Submit();

                            //Report
                            Console.Write("{0}: ", DateTime.Now);

                            Console.ForegroundColor = ConsoleColor.Green;
                            Console.WriteLine("Successfully quoted thread: {0}. Waiting 30s...", threadInfo.threadID);
                            Console.ResetColor();
                        }
                        catch (OpenQA.Selenium.NoSuchElementException)
                        {
                            // Happens when the bot tries to post in a thread that was just deleted
                            // so it only sees "Invalid thread specified"
                            Console.Write("{0}: ", DateTime.Now);

                            Console.ForegroundColor = ConsoleColor.Red;
                            Console.WriteLine("Poster: Unable to load thread, possibly deleted.");
                            Console.ResetColor();
                        }
                        finally
                        {
                            // 30 seconds between posts
                            Thread.Sleep(30000);
                        }
                    }
                    cacherRecentlyCaches.WaitOne();
                }
            }

            public string randomMessage()
            {
                string[] messageList = new String[7];
                messageList[0] = "Đức phát nào.:byebye:";
                messageList[1] = "Xong nhiệm vụ.:go:";
                messageList[2] = "Không biết nói gì.:go:";
                messageList[3] = ":sweat::sweat:";
                messageList[4] = "Hoàn tất :byebye:";
                messageList[5] = "Hmmm...:sweat:";
                messageList[6] = "#sau có ý kiến gì ko ?";
                Random rndm = new Random();
                return messageList[rndm.Next(7)];
            }
            public bool IsLowPostCount(string repliesNum_String)
            {
                // Sometimes this number is X,XXX so "," must be removed before parsing to Int
                repliesNum_String = repliesNum_String.Replace(",", "");
                int repliesNum_Int = Int32.Parse(repliesNum_String);
                if (repliesNum_Int < 5)
                    return true;
                else
                    return false;
            }
            public bool IsAlreadyQuoted(string statusicon)
            {
                // Status icons indicate whether the bot posted in this thread or not
                if (statusicon != "https://vozforums.com/images/statusicon/thread_dot.gif"
                    && statusicon != "https://vozforums.com/images/statusicon/thread_dot_new.gif")
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            public string ExtractThreadID(string threadIDTag_XPath)
            {
                IWebElement threadIDTag = cacher_driver.FindElement(By.XPath(threadIDTag_XPath));
                string threadID = threadIDTag.GetAttribute("id").Substring(20);
                return threadID;
            }
            public string ExtractFirstPostID(string firstPostIDTag_XPath)
            {
                IWebElement firstPostIDTag = cacher_driver.FindElement(By.XPath(firstPostIDTag_XPath));
                string firstPostID = firstPostIDTag.GetAttribute("id").Substring(4);
                return firstPostID;
            }
            public string ExtractFirstPostContent(string firstPostContentTag_XPath)
            {
                IWebElement firstPostContentTag = cacher_driver.FindElement(By.XPath(firstPostContentTag_XPath));
                string firstPostContent = firstPostContentTag.Text;
                return firstPostContent;
            }
            
        }
    }
}
