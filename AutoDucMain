using System;
using System.Collections.Generic;
using System.Threading;
using System.Runtime.InteropServices;
using OpenQA.Selenium;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.PhantomJS;
using OpenQA.Selenium.Firefox;

namespace SeleniumAutoDuc
{
    class Program
    {
        private static Cacher cacher;
        private static Poster poster;
        private static Thread cacher_thread;
        private static Thread poster_thread;

        static void Main(string[] args)
        {
            InfoHolder.PhantomJSPrompt();
            InfoHolder.LoginPrompt();
            // Init
            cacher = new Cacher(InfoHolder.PathToPhantomJS);
            poster = new Poster(InfoHolder.PathToPhantomJS);

            try
            {
                Init();
            }
            catch (WebDriverTimeoutException)
            {
                // End all working threads and start again
                Console.Clear();
                Dispose();
                Init();
            }
        }

        public static void Init()
        {
            // Input
            InfoHolder.IsWorking = true;
            Console.WriteLine("Please wait for browser to launch...");
      
            // Start 2 threads
            cacher_thread = new Thread(() => cacher.Start());
            poster_thread = new Thread(() => poster.Start());

            cacher_thread.Start();
            poster_thread.Start();
        }

        public static void Dispose()
        {
            InfoHolder.IsWorking = false;
            Console.WriteLine("Browser request timed out. Restarting...");
            cacher.Stop();
            poster.Stop();
        }

        public abstract class VozSurfer
        {
            protected string driver_name;
            protected IWebDriver driver;

            public virtual void Login(string userName, string password)
            {
                // Vbulletin allows login from multiple sources

                driver.Navigate().GoToUrl("https://vozforums.com/forumdisplay.php?f=17");

                // Wait for form to load
                // Lambda expression -> testing, no idea why this works
                //waitForLoad = new WebDriverWait(driver, TimeSpan.FromSeconds(10));
                //waitForLoad.Until(drv => driver.FindElement(By.XPath("//*[@id='navbar_username']")));

                // UName & Password
                // Empty UName placeholder
                IWebElement usernameForm_Elmt = driver.FindElement(By.XPath("//*[@id='navbar_username']"));
                usernameForm_Elmt.Clear();
                usernameForm_Elmt.SendKeys(userName);
                IWebElement passwordForm_Elmt = driver.FindElement(By.XPath("//*[@id='navbar_password']"));
                passwordForm_Elmt.SendKeys(password);

                // Click submit
                IWebElement submitButton_Elmt = driver.FindElement(By.XPath("/html/body/div[2]/div[1]/div/table/tbody/tr/td[2]/form/table/tbody/tr[2]/td[3]/input"));
                submitButton_Elmt.Submit();

                // Wait 10s for login redirection ( depends on connection )
                Thread.Sleep(10000);

                // Still not redirected: either you're banned or your internet connection fails
                if (driver.Url != "https://vozforums.com/forumdisplay.php?f=17")
                {
                    Console.Write("{0}: ", DateTime.Now);

                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("{0}: Login failed, wrong Username & Password or you're banned.", driver_name);
                    Console.ResetColor();
                }
                else
                {
                    Console.Write("{0}: ", DateTime.Now);

                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.WriteLine("{0}: Login successful!", driver_name);
                    Console.ResetColor();
                }

            }
            public virtual void Stop()
            {
                driver.Quit();
            }
        }

        public class Cacher : VozSurfer
        {
            public Cacher(string PathToPhantomJS)
            {
                driver_name = "Cacher";
                PhantomJSDriverService noCLI = PhantomJSDriverService.CreateDefaultService(PathToPhantomJS);
                noCLI.HideCommandPromptWindow = true;
                driver = new PhantomJSDriver(noCLI);
                //System.Environment.SetEnvironmentVariable("webdriver.gecko.driver", PathToPhantomJS);
                Console.WriteLine(driver.WindowHandles.ToString());
                //driver = new FirefoxDriver();
            }

            public void Start()
            {
                Login(InfoHolder.userName, InfoHolder.password);
                CacheNewThread(ref InfoHolder.threadInfos, ref InfoHolder.quotedThreadInfos);
            }

            public void CacheNewThread(ref Queue<threadInfo> threadInfos, ref Queue<threadInfo> quotedThreadInfos)
            {
                while (InfoHolder.IsWorking)
                {
                    // Refresh f17
                    driver.Navigate().GoToUrl("https://vozforums.com/forumdisplay.php?f=17");
                    Console.WriteLine("{0}: Refresh F17 for new threads.", DateTime.Now);

                    // Search for new threads
                    for (int i = 9; i <= 28; i++)
                    {
                        try
                        {
                            // Find <tr> tags inside <tbody> of f17 ( see f17 HTML source )
                            // From 1 to 8 are forbidden threads and F17 always contains 28 thread
                            string trPattern_XPath = "//*[@id='threadbits_forum_17']/tr"; // + [x]
                            string tr_XPath = trPattern_XPath + "[" + i + "]";

                            // Number of replies is in the right of title
                            // Status icon is in the left of title
                            string repliesNum = driver.FindElement(By.XPath(tr_XPath + "/td[4]/a")).Text;
                            string statusicon = driver.FindElement(By.XPath(tr_XPath + "/td[1]/img")).GetAttribute("src");

                            // Must check both <IsAlreadyQuoted status icon> and <quotedQueue>
                            // because maybe in the last working session, the bot already posted in this thread
                            // but when we turn off, quotedQueue is disposed.
                            if (IsLowPostCount(repliesNum) && IsAlreadyQuoted(statusicon))
                            {
                                // Go to thread
                                string threadIDTag_XPath = tr_XPath + "/td[1]";

                                string threadID = ExtractThreadID(threadIDTag_XPath);
                                string showThread_url = "https://vozforums.com/showthread.php?t=" + threadID;
                                driver.Navigate().GoToUrl(showThread_url);

                                // Get ID from thread
                                string firstPostID_XPath = "//*[@id='posts']/div[1]/div/div" + "/div";

                                string firstPostID = ExtractFirstPostID(firstPostID_XPath);

                                // Go to quoting reply page
                                string doNewReply = "https://vozforums.com/newreply.php?do=newreply&p=" + firstPostID;
                                driver.Navigate().GoToUrl(doNewReply);
                                string firstPostContent_XPath = "//*[@id='vB_Editor_001_textarea']";

                                string firstPostContent = ExtractFirstPostContent(firstPostContent_XPath);

                                // Enqueue ID and content for later reply
                                threadInfo threadInfo = new threadInfo();
                                threadInfo.threadID = threadID;
                                threadInfo.firstPostID = firstPostID;
                                threadInfo.firstPostContent = RemoveLink_n_Img(firstPostContent);

                                // Only enqueue if not in queue and not in already posted
                                lock (InfoHolder.locker)
                                {
                                    if (!threadInfos.Contains(threadInfo) && !quotedThreadInfos.Contains(threadInfo))
                                    {
                                        threadInfos.Enqueue(threadInfo);
                                    }
                                }

                                // We found a new thread and cacher is now in that thread
                                // break this <for loop> to return to f17 and calculate from 9 - 28 again
                                break;
                            }
                        }
                        catch (OpenQA.Selenium.NoSuchElementException)
                        {
                            Console.Write("{0}: ", DateTime.Now);

                            Console.ForegroundColor = ConsoleColor.Red;
                            Console.WriteLine("Cacher: Unable to load thread, possibly deleted.");
                            Console.ResetColor();
                        }
                        finally
                        {
                            // scan through all threads, wait 5s before rescanning
                            if (i == 28)
                            {
                                Thread.Sleep(5000);
                            }     
                        }
                    }
                }
            }

            public bool IsLowPostCount(string repliesNum_String)
            {
                // Sometimes this number is X,XXX so "," must be removed before parsing to Int
                repliesNum_String = repliesNum_String.Replace(",", "");
                int repliesNum_Int = Int32.Parse(repliesNum_String);
                if (repliesNum_Int < 5)
                    return true;
                else
                    return false;
            }
            public bool IsAlreadyQuoted(string statusicon)
            {
                // Status icons indicate whether the bot posted in this thread or not
                if (statusicon != "https://vozforums.com/images/statusicon/thread_dot.gif"
                    && statusicon != "https://vozforums.com/images/statusicon/thread_dot_new.gif")
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }

            // Extract specific thing from specific XPath
            // hard-coded to vozforum
            public string RemoveLink_n_Img(string firstPostContent)
            {
                // Remove [URL, [url, [/url], [/URL]
                firstPostContent = firstPostContent.Replace("[URL","");
                firstPostContent = firstPostContent.Replace("[url","");
                firstPostContent = firstPostContent.Replace("[/URL]","");
                firstPostContent = firstPostContent.Replace("[/url]","");

                // Remove [IMG], [img], [/IMG], [/img]
                firstPostContent = firstPostContent.Replace("[IMG]", "");
                firstPostContent = firstPostContent.Replace("[img]", "");
                firstPostContent = firstPostContent.Replace("[/IMG]", "");
                firstPostContent = firstPostContent.Replace("[/img]", "");

                // Remove http://, https://
                firstPostContent = firstPostContent.Replace("http://", "");
                firstPostContent = firstPostContent.Replace("https://", "");

                return firstPostContent;
            }
            public string ExtractThreadID(string threadIDTag_XPath)
            {
                IWebElement threadIDTag = driver.FindElement(By.XPath(threadIDTag_XPath));
                string threadID = threadIDTag.GetAttribute("id").Substring(20);
                return threadID;
            }
            public string ExtractFirstPostID(string firstPostIDTag_XPath)
            {
                IWebElement firstPostIDTag = driver.FindElement(By.XPath(firstPostIDTag_XPath));
                string firstPostID = firstPostIDTag.GetAttribute("id").Substring(4);
                return firstPostID;
            }
            public string ExtractFirstPostContent(string firstPostContentTag_XPath)
            {
                IWebElement firstPostContentTag = driver.FindElement(By.XPath(firstPostContentTag_XPath));
                string firstPostContent = firstPostContentTag.Text;
                return firstPostContent;
            }
        }

        public class Poster : VozSurfer
        {
            private bool justQuoted = false;

            public Poster(string PathToPhantomJS)
            {
                // FF test
                driver_name = "Poster";
                //System.Environment.SetEnvironmentVariable("webdriver.gecko.driver", PathToPhantomJS);
                PhantomJSDriverService noCLI = PhantomJSDriverService.CreateDefaultService(PathToPhantomJS);
                noCLI.HideCommandPromptWindow = true;
                driver = new PhantomJSDriver(noCLI);

                //driver = new FirefoxDriver();
            }

            public void Start()
            {
                Login(InfoHolder.userName, InfoHolder.password);
                PostQueuedMessages(ref InfoHolder.threadInfos, ref InfoHolder.quotedThreadInfos);
            }

            public void PostQueuedMessages(ref Queue<threadInfo> threadInfos, ref Queue<threadInfo> quotedThreadInfos)
            {
                while (InfoHolder.IsWorking)
                {
                    while (threadInfos.Count != 0)
                    {
                        // Go to posting page of a thread in the queue
                        lock (InfoHolder.locker)
                        {
                            threadInfo threadInfo = threadInfos.Dequeue();
                            try
                            {
                                driver.Navigate().GoToUrl("https://vozforums.com/newreply.php?do=newreply&p=" + threadInfo.firstPostID);

                                // Erase first post quote ( possibly edited by user )
                                // Add the cached first post quote
                                IWebElement messageForm_Elmt = driver.FindElement(By.XPath("//*[@id='vB_Editor_001_textarea']"));
                                messageForm_Elmt.Clear();
                                messageForm_Elmt.SendKeys(threadInfo.firstPostContent);
                                messageForm_Elmt.SendKeys(randomMessage());
                                IWebElement submitButton_Elmt = driver.FindElement(By.XPath("//*[@id='vB_Editor_001_save']"));
                                submitButton_Elmt.Submit();
                            }
                            catch (OpenQA.Selenium.NoSuchElementException)
                            {
                                // Happens when the bot tries to post in a thread that was just deleted
                                // so it only sees "Invalid thread specified"
                                Console.Write("{0}: ", DateTime.Now);

                                Console.ForegroundColor = ConsoleColor.Red;
                                Console.WriteLine("Poster: Unable to load thread. Retry later.");
                                Console.ResetColor();

                                // Failed to post in this thread for some unknown reasons
                                // Add back to queue
                                threadInfos.Enqueue(threadInfo);
                            }
                            finally
                            {
                                // 30 seconds between posts
                                // Only add to quotedThreadInfo if posted successfully
                                // ( if failed to post, current threadInfo still remains ( handled in <catch> ))

                                if (!threadInfos.Contains(threadInfo))
                                {
                                    quotedThreadInfos.Enqueue(threadInfo);
                                    justQuoted = true;
                                    //Report
                                    Console.Write("{0}: ", DateTime.Now);

                                    Console.ForegroundColor = ConsoleColor.Green;
                                    Console.WriteLine("Successfully quoted thread: {0}. Waiting 30s...", threadInfo.threadID);
                                    Console.ResetColor();
                                }
                            }
                        }
                        // Out of lock and just quoted something, wait 30s
                        if (justQuoted == true)
                        {
                            justQuoted = false;
                            Thread.Sleep(30000);
                        }
                    }
                    // Out of <while (count != 0)>
                    // Only check for new threads to post every 5s
                    // to avoid CPU consuming
                    Thread.Sleep(5000);
                }
            }

            public string randomMessage()
            {
                string[] messageList = new String[10];
                messageList[0] = "Prepare... for your Đức.";
                messageList[1] = "Your final Đức begins.";
                messageList[2] = "You will learn what Đức truly is.";
                messageList[3] = "This...Đức passion...compels me.";
                messageList[4] = "I never Đức anyone. It is the program that Đức.";
                messageList[5] = "Đức requires a certain loss of bandwidth.";
                messageList[6] = "They call me mad. All Đức-ers are mad.";
                messageList[7] = "I'm misunderstood. Đức can't be evil.";
                messageList[8] = "Until they ban me, I'll keep Đức-ing.";
                messageList[9] = "Only my Đức can make you memorable.";
                Random rndm = new Random();
                return messageList[rndm.Next(10)];
            }
        }

        public static class InfoHolder
        {
            public static string userName;
            public static string password;
            public static string PathToPhantomJS;
            public static Queue<threadInfo> threadInfos = new Queue<threadInfo>();
            public static Queue<threadInfo> quotedThreadInfos = new Queue<threadInfo>();
            public static Object locker = new Object();
            public static bool IsWorking = true;

            public static void PhantomJSPrompt()
            {
                Console.WriteLine("Enter the path to the folder that contains phantomjs.exe: ");
                PathToPhantomJS = Console.ReadLine();
                PathToPhantomJS = PathToPhantomJS.Replace("\\", "\\");
            }

            public static void LoginPrompt()
            {
                Console.Write("Username: ");
                userName = Console.ReadLine();

                Console.Write("Password: ");
                password = Console.ReadLine();
            }            
        }

        public struct threadInfo
        {
            public string threadID;
            public string firstPostID;
            public string firstPostContent;
        }

        public enum CtrlTypes
        {
            CTRL_C_EVENT = 0,
            CTRL_BREAK_EVENT,
            CTRL_CLOSE_EVENT,
            CTRL_LOGOFF_EVENT = 5,
            CTRL_SHUTDOWN_EVENT
        }
    }
}
